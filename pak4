#!/bin/bash
# pak4 v4.1.21 - Enhanced pak3 with LLM semantic compression + method diff extraction
# NEW: Added -d (extract method diff), -vd (verify method diff), -ad (apply method diff) commands
# Extends pak3 with -c4/semantic compression level using LLM + method-level diffs
# Supports all pak3 commands: pack, list (-l), list-detailed (-ll), extract (-x), verify (-v)
# FIXED: Corrected argument passing to pak_core.py
# Usage: pak4 [dirs/files] [options]
# Example: pak4 . -t py,js -c4 -m 5000 -o project_semantic.pak

VERSION="4.1.0-method-diff-fixed-v2" # Incremented fix version
SCRIPT_DIR="$(dirname "$(readlink -f "$0")")"
PAK_CORE_PY="$SCRIPT_DIR/pak_core.py"
SEMANTIC_COMPRESSOR_PY="$SCRIPT_DIR/semantic_compressor.py"
LLM_WRAPPER_PY="$SCRIPT_DIR/llm_wrapper.py"

# Defaults (same as pak3)
COMPRESSION_LEVEL="none"
MAX_TOKENS=0
OUTPUT_FILE=""
INCLUDE_EXTENSIONS=()
TARGETS=()
QUIET=false
COMMAND="pack" # Default command
EXTRACT_PATTERN=""
EXTRACT_DIR="."
ARCHIVE_FILE=""

# NEW: Method diff specific variables
DIFF_EXTRACT_MODE=false
VERIFY_DIFF_MODE=false
APPLY_DIFF_MODE=false
DIFF_OUTPUT_FILE=""
DIFF_INPUT_FILE=""

# Check dependencies
check_dependencies() {
  local missing_deps=()

  if [ ! -f "$PAK_CORE_PY" ]; then
    missing_deps+=("pak_core.py")
  fi

  if [ ! -f "$SEMANTIC_COMPRESSOR_PY" ]; then
    missing_deps+=("semantic_compressor.py")
  fi

  if [ ! -f "$LLM_WRAPPER_PY" ]; then
    missing_deps+=("llm_wrapper.py")
  fi

  if [ ${#missing_deps[@]} -gt 0 ]; then
    echo "pak4: Missing dependencies: ${missing_deps[*]}" >&2
    echo "pak4: Please ensure all required files are in the same directory." >&2
    exit 1
  fi

  # Check for .env file
  if [ ! -f ".env" ] && [ ! -f "$SCRIPT_DIR/.env" ]; then
    echo "pak4: Warning: No .env file found. Please copy .env.sample to .env and configure." >&2
    echo "pak4: Semantic compression (level 4) requires OPENROUTER_API_KEY." >&2
  fi

  # Check Python dependencies for semantic compression
  if ! python3 -c "import requests, dotenv" 2>/dev/null; then
    echo "pak4: Warning: Missing Python dependencies for semantic compression." >&2
    echo "pak4: Install with: pip install requests python-dotenv" >&2
    echo "pak4: Falling back to AST/aggressive compression when semantic is requested." >&2
  fi
}

# Load environment variables
load_env() {
  if [ -f ".env" ]; then
    set -a
    source .env
    set +a
  elif [ -f "$SCRIPT_DIR/.env" ]; then
    set -a
    source "$SCRIPT_DIR/.env"
    set +a
  fi
}

usage() {
  cat << EOF
pak4 v$VERSION - LLM-enhanced file archiver with semantic compression + METHOD DIFF SUPPORT

USAGE:
  pak4 [targets] [options]                     # Pack (default)
  pak4 -l archive.pak [-p regex]              # List contents (with optional pattern filter)
  pak4 -ll archive.pak [-p regex]             # List with content preview
  pak4 -x archive.pak [-d outdir] [-p regex]  # Extract (with optional pattern filter)
  pak4 -v archive.pak                         # Verify archive integrity

  NEW METHOD DIFF COMMANDS:
  pak4 --diff file1.py file2.py [...] -o changes.diff  # Extract method-level diff
  pak4 -vd changes.diff                               # Verify method diff syntax
  pak4 -ad changes.diff target_dir_or_file            # Apply method diff to files

TARGETS:
  .                    Current directory
  src/ lib/            Specific directories
  main.py readme.md    Specific files
  pak_core*            GLOB PATTERNS
  *.py                 All Python files in current dir
  src/**/*.js          All JS files in src/ recursively (zsh/bash 4.0+)

PACK OPTIONS:
  -t ext1,ext2         Extensions (py,md,js,ts,cpp,h,go,rs,java). Separated by comma or space.
       Example: -t py,md or -t "py md" or -tpy,md
  -c LEVEL             Compression: 0=none, 1=light, 2=medium, 3=aggressive, 4=semantic, s=smart.
       Example: -c2 or -c4 or -csemantic
  -m NUM               Max tokens (0=unlimited). Example: -m8000 or -m 8000
  -o FILE              Output file (default: stdout or auto-generated if stdout is a TTY).
       Example: -o project.pak or -oproject.pak
  -q                   Quiet mode.

EXTRACT/LIST OPTIONS:
  -p PATTERN           Filter files matching regex pattern (applied to full path).
  -d DIR               (Extract only) Extract to specific directory.

METHOD DIFF OPTIONS:
  --diff                Extract method-level differences between files
  -vd                   Verify method diff file syntax
  -ad                   Apply method diff to target files
  -o FILE               Output file for method diff extraction

EXAMPLES:
  # Traditional pak4 usage
  pak4 . -t py,md -c4                         # Semantic compression, Python+Markdown
  pak4 src/ -cs -m 8000 -o project.pak       # Smart mode, 8k token limit

  # Method diff workflow
  pak4 --diff original.py modified.py -o changes.diff
  pak4 -vd changes.diff
  pak4 -ad changes.diff target_project/target_file.py

COMPRESSION LEVELS:
  0/none      : Raw content
  1/light     : Basic whitespace/empty line removal
  2/medium    : Light + comment removal (pak3 compatible)
  3/aggressive: AST-based structure extraction
  4/semantic  : LLM-based semantic compression
  s/smart     : Adaptive compression with semantic fallback
EOF
}

parse_compression() {
  case "$1" in
    0|none) echo "none" ;;
    1|light) echo "light" ;;
    2|medium) echo "medium" ;;
    3|aggressive) echo "aggressive" ;;
    4|semantic) echo "semantic" ;;
    s|S|smart) echo "smart" ;;
    *) echo "Error: Invalid compression level '$1'. Use 0-4, s, or full names (semantic)." >&2; usage; exit 1 ;;
  esac
}

parse_extensions() {
  local ext_string="$1"
  local -a exts
  # Normalize: replace commas with spaces for consistent splitting
  local normalized_ext_string="${ext_string//,/ }"
  # Read into array, splitting by spaces (IFS default)
  read -ra ADDR <<< "$normalized_ext_string"
  for ext_raw in "${ADDR[@]}"; do
    # Trim whitespace from each extension part
    local ext="${ext_raw#"${ext_raw%%[![:space:]]*}"}" # trim leading whitespace
    ext="${ext%"${ext##*[![:space:]]}"}"               # trim trailing whitespace
    if [ -z "$ext" ]; then continue; fi # Skip empty strings
    if [[ "$ext" != .* ]]; then
      ext=".$ext"
    fi
    exts+=("$ext")
  done
  # Print each extension on a new line, to be read by readarray
  printf '%s\n' "${exts[@]}"
}

auto_output_name() {
  local base_name="archive"
  if [ ${#TARGETS[@]} -eq 1 ] && [ -d "${TARGETS[0]}" ]; then
    base_name=$(basename "${TARGETS[0]}")
    if [ "$base_name" = "." ] || [ -z "$base_name" ]; then # Handle "." or empty basename if PWD is root
      base_name=$(basename "$PWD")
    fi
  elif [ ${#TARGETS[@]} -gt 0 ]; then
    base_name=$(basename "${TARGETS[0]}")
    base_name="${base_name%.*}_collection" # If first target is a file or multiple targets
  fi

  # Add compression suffix
  case "$COMPRESSION_LEVEL" in
    semantic) base_name="${base_name}_semantic" ;;
    smart) base_name="${base_name}_smart" ;;
    aggressive) base_name="${base_name}_min" ;;
    medium) base_name="${base_name}_med" ;;
    light) base_name="${base_name}_light" ;;
  esac

  echo "${base_name}.pak"
}

has_python_core() {
  [ -f "$PAK_CORE_PY" ] && python3 -c "import sys; sys.path.insert(0, '$SCRIPT_DIR'); import pak_core" 2>/dev/null
}

# Test LLM connection for semantic compression
test_llm_connection() {
  if ! python3 -c "
import sys
sys.path.insert(0, '$SCRIPT_DIR')
from llm_wrapper import test_llm_connection
exit(0 if test_llm_connection() else 1)
" 2>/dev/null; then
    echo "pak4: Warning: LLM connection test failed. Semantic compression may not work." >&2
    echo "pak4: Please check your .env configuration and OPENROUTER_API_KEY." >&2
    return 1
  fi
  return 0
}

# FIXED: Simplified pack_files function
pack_files() {
  local python_args=("pack")

  # Add targets
  if [ ${#TARGETS[@]} -gt 0 ]; then
    python_args+=("${TARGETS[@]}")
  fi

  # Add options
  python_args+=("--compression-level" "$COMPRESSION_LEVEL")

  if [ "$MAX_TOKENS" -gt 0 ]; then
    python_args+=("--max-tokens" "$MAX_TOKENS")
  fi

  if [ ${#INCLUDE_EXTENSIONS[@]} -gt 0 ]; then
    python_args+=("--ext" "${INCLUDE_EXTENSIONS[@]}")
  fi

  if $QUIET; then
    python_args+=("--quiet")
  fi

  if [ -n "$OUTPUT_FILE" ]; then
    python_args+=("--output" "$OUTPUT_FILE")
  fi

  if has_python_core; then
    if ! $QUIET; then echo "pak4: Using enhanced Python core for processing." >&2; fi

    # DEBUG: Show what we're passing to Python
    if [ "$PAK_DEBUG" = "true" ]; then
      echo "pak4: DEBUG: python_args passed to pak_core:" >&2
      printf "pak4: DEBUG:   '%s'\n" "${python_args[@]}" >&2
    fi

    # FIXED: Clean argument passing
    python3 -c "
import sys
sys.path.insert(0, '$SCRIPT_DIR')
from pak_core import main as pak_main
sys.argv = ['pak_core.py'] + [arg for arg in sys.argv[1:]] # Ensure sys.argv[0] is script name
pak_main()
" "${python_args[@]}"
  else
    if ! $QUIET; then echo "pak4: Python core '$PAK_CORE_PY' not available or importable. Cannot pack." >&2; fi
    exit 1
  fi
}

# NEW: Method diff functions
extract_method_diff() {
  if ! has_python_core; then
    echo "pak4: Python core '$PAK_CORE_PY' not available. Cannot extract method diff." >&2
    exit 1
  fi

  local python_args=("extract-diff")
  python_args+=("${TARGETS[@]}")

  if [ -n "$DIFF_OUTPUT_FILE" ]; then
    python_args+=("--output" "$DIFF_OUTPUT_FILE")
  fi

  if $QUIET; then
    python_args+=("--quiet")
  fi

  python3 -c "
import sys
sys.path.insert(0, '$SCRIPT_DIR')
from pak_core import main as pak_main
sys.argv = ['pak_core.py'] + [arg for arg in sys.argv[1:]]
pak_main()
" "${python_args[@]}"
}

verify_method_diff() {
  if ! has_python_core; then
    echo "pak4: Python core '$PAK_CORE_PY' not available. Cannot verify method diff." >&2
    exit 1
  fi

  local python_args=("verify-diff" "$DIFF_INPUT_FILE")

  if $QUIET; then
    python_args+=("--quiet")
  fi

  python3 -c "
import sys
sys.path.insert(0, '$SCRIPT_DIR')
from pak_core import main as pak_main
sys.argv = ['pak_core.py'] + [arg for arg in sys.argv[1:]]
pak_main()
" "${python_args[@]}"
}

apply_method_diff() {
  if ! has_python_core; then
    echo "pak4: Python core '$PAK_CORE_PY' not available. Cannot apply method diff." >&2
    exit 1
  fi

  # python_args should be: "apply-diff", "diff_file_path", "target_path_or_dir"
  local python_args=("apply-diff" "$DIFF_INPUT_FILE") # DIFF_INPUT_FILE is the first positional arg for pak_core

  if [ ${#TARGETS[@]} -gt 0 ]; then
    python_args+=("${TARGETS[0]}") # TARGETS[0] is the second positional arg (the target path/dir) for pak_core
  else
    echo "pak4: Error: Target path/file missing for apply-diff operation." >&2
    usage
    exit 1
  fi

  if $QUIET; then
    python_args+=("--quiet")
  fi

  # Debugging
  if [ "$PAK_DEBUG" = "true" ]; then
    echo "pak4: DEBUG: python_args for apply-diff:" >&2
    printf "pak4: DEBUG:   '%s'\n" "${python_args[@]}" >&2
  fi

  python3 -c "
import sys
sys.path.insert(0, '$SCRIPT_DIR')
from pak_core import main as pak_main
sys.argv = ['pak_core.py'] + [arg for arg in sys.argv[1:]] # Ensure sys.argv[0] is script name
pak_main()
" "${python_args[@]}"
}


# List/Extract/Verify functions that call Python core
call_python_core_command() {
  local command_name="$1"
  local archive_file_arg="$2"
  local output_dir_arg="$3" # Only for extract
  local pattern_arg="$4"

  if ! has_python_core; then
    echo "pak4: Python core '$PAK_CORE_PY' not available or importable. Cannot execute '$COMMAND'." >&2
    exit 1
  fi

  local python_args=("$command_name" "$archive_file_arg")

  if [ "$COMMAND" == "extract" ] && [ -n "$output_dir_arg" ]; then
    python_args+=("--outdir" "$output_dir_arg")
  fi

  if [ -n "$pattern_arg" ]; then
    python_args+=("--pattern" "$pattern_arg")
  fi

  if $QUIET; then
    python_args+=("--quiet")
  fi

  python3 -c "
import sys
sys.path.insert(0, '$SCRIPT_DIR')
from pak_core import main as pak_main
sys.argv = ['pak_core.py'] + [arg for arg in sys.argv[1:]]
pak_main()
" "${python_args[@]}"
}

# Initialize
check_dependencies
load_env

# Determine command first (simplified)
TEMP_ARGS=("$@")
for arg in "${TEMP_ARGS[@]}"; do
  case "$arg" in
    -l|--list) COMMAND="list" ;;
    -ll|--list-detailed) COMMAND="list-detailed" ;;
    -x|--extract) COMMAND="extract" ;;
    -v|--verify) COMMAND="verify" ;;
    --diff) DIFF_EXTRACT_MODE=true; COMMAND="extract-diff" ;; # Handled here
    -vd|--verify-diff) VERIFY_DIFF_MODE=true; COMMAND="verify-diff" ;;
    -ad|--apply-diff) APPLY_DIFF_MODE=true; COMMAND="apply-diff" ;;
  esac
done

# Main argument parsing loop
while [ $# -gt 0 ]; do
  current_arg="$1"
  case "$current_arg" in
    -h|--help) usage; exit 0 ;;
    -l|--list) COMMAND="list"; shift ;;
    -ll|--list-detailed) COMMAND="list-detailed"; shift ;;
    -x|--extract) COMMAND="extract"; shift ;;
    -v|--verify)
      if ! $VERIFY_DIFF_MODE; then # Make sure -v for archive verify isn't overridden by -vd's parsing
        COMMAND="verify"
      fi
      shift ;;

    --diff) # For extracting diffs
      DIFF_EXTRACT_MODE=true
      COMMAND="extract-diff"
      shift ;;
    -vd|--verify-diff)
      VERIFY_DIFF_MODE=true
      COMMAND="verify-diff"
      shift ;;
    -ad|--apply-diff)
      APPLY_DIFF_MODE=true
      COMMAND="apply-diff"
      shift ;;

    -q|--quiet) QUIET=true; shift ;;

    -c[0-9]|"-c"[4sS]) # Attached: -c0, -c1, -c2, -c3, -c4, -cs, -cS
      LEVEL_ARG="${current_arg#-c}"
      COMPRESSION_LEVEL=$(parse_compression "$LEVEL_ARG")
      shift
      ;;
    -c|--compression) # Separated: -c VAL
      shift
      if [ $# -eq 0 ] || [[ "$1" == -* ]]; then echo "Error: -c requires compression level value." >&2; usage; exit 1; fi
      COMPRESSION_LEVEL=$(parse_compression "$1")
      shift
      ;;

    -t?*) # Attached: -tpy,md or -t.py
      TYPES_VAL="${current_arg#-t}"
      readarray -t INCLUDE_EXTENSIONS < <(parse_extensions "$TYPES_VAL")
      shift
      ;;
    -t|--types) # Separated: -t VAL
      shift
      if [ $# -eq 0 ] || [[ "$1" == -* ]]; then echo "Error: -t requires extension list value." >&2; usage; exit 1; fi
      readarray -t INCLUDE_EXTENSIONS < <(parse_extensions "$1")
      shift
      ;;

    -m[0-9]*) # Attached: -mNUM
      TOKEN_ARG="${current_arg#-m}"
      if ! [[ "$TOKEN_ARG" =~ ^[0-9]+$ ]]; then echo "Error: -m value must be a number. Got '$TOKEN_ARG' from '$current_arg'." >&2; usage; exit 1; fi
      MAX_TOKENS="$TOKEN_ARG"
      shift
      ;;
    -m|--max-tokens) # Separated: -m NUM
      shift
      if [ $# -eq 0 ] || [[ "$1" == -* ]]; then echo "Error: -m requires token count value." >&2; usage; exit 1; fi
      if ! [[ "$1" =~ ^[0-9]+$ ]]; then echo "Error: -m value must be a number. Got '$1'." >&2; usage; exit 1; fi
      MAX_TOKENS="$1"
      shift
      ;;

    -o?*) # Attached: -ofile.pak or -o changes.diff
      OUTPUT_ARG="${current_arg#-o}"
      if $DIFF_EXTRACT_MODE || [ "$COMMAND" == "extract-diff" ]; then # if --diff was seen or command is extract-diff
        DIFF_OUTPUT_FILE="$OUTPUT_ARG"
      else
        OUTPUT_FILE="$OUTPUT_ARG"
      fi
      shift
      ;;
    -o|--output) # Separated: -o file.pak or -o changes.diff
      shift
      if [ $# -eq 0 ] || [[ "$1" == -* ]]; then echo "Error: -o requires filename value." >&2; usage; exit 1; fi
      if $DIFF_EXTRACT_MODE || [ "$COMMAND" == "extract-diff" ]; then
        DIFF_OUTPUT_FILE="$1"
      else
        OUTPUT_FILE="$1"
      fi
      shift
      ;;

    -d?*) # Attached: -d./out (only for regular extract command)
      if [ "$COMMAND" == "extract" ]; then
        EXTRACT_DIR="${current_arg#-d}"
      else
         echo "Warning: -d option is only for 'extract' command. Ignoring for '$COMMAND'." >&2
      fi
      shift
      ;;
    -d|--outdir) # Separated: -d ./out (only for regular extract command)
      if [ "$COMMAND" == "extract" ]; then
        shift
        if [ $# -eq 0 ] || [[ "$1" == -* ]]; then echo "Error: -d requires directory path value for extract." >&2; usage; exit 1; fi
        EXTRACT_DIR="$1"
        shift
      else
        echo "Warning: -d option is only for 'extract' command. Ignoring for '$COMMAND'." >&2
        shift # consume the -d
        if [ $# -gt 0 ] && ! [[ "$1" == -* ]]; then shift; fi # consume its value if present
      fi
      ;;

    -p?*) # Attached: -p"mypattern"
      EXTRACT_PATTERN="${current_arg#-p}"
      shift
      ;;
    -p|--pattern) # Separated: -p "mypattern"
      shift
      if [ $# -eq 0 ]; then
         echo "Error: -p requires a regex pattern value." >&2; usage; exit 1;
      fi
      EXTRACT_PATTERN="$1"
      shift
      ;;

    -*) # Catch-all for unknown options starting with -
      echo "Error: Unknown option: $current_arg" >&2
      usage >&2
      exit 1
      ;;

    *) # Positional arguments
      if [[ "$COMMAND" == "pack" || "$COMMAND" == "extract-diff" ]]; then
        TARGETS+=("$current_arg")
      elif [[ "$COMMAND" == "verify-diff" ]]; then
        if [ -z "$DIFF_INPUT_FILE" ]; then
          DIFF_INPUT_FILE="$current_arg"
        else
          echo "Error: Too many arguments for $COMMAND. Expected one diff file." >&2; usage; exit 1;
        fi
      elif [[ "$COMMAND" == "apply-diff" ]]; then
        if [ -z "$DIFF_INPUT_FILE" ]; then
          DIFF_INPUT_FILE="$current_arg"
        elif [ ${#TARGETS[@]} -eq 0 ]; then # Expecting target path/file after diff file
          TARGETS+=("$current_arg")
        else
          echo "Error: Too many arguments for $COMMAND. Expected diff file and one target path/file." >&2; usage; exit 1;
        fi
      else # list, extract, verify (archive commands)
        if [ -z "$ARCHIVE_FILE" ]; then
          ARCHIVE_FILE="$current_arg"
        else
          echo "Error: Too many archive files specified for $COMMAND operation. Expected one." >&2; usage; exit 1;
        fi
      fi
      shift
      ;;
  esac
done


# Process arguments for semantic compression testing
if [ "$COMMAND" == "pack" ]; then
  # Check if semantic compression is requested and test LLM if needed
  if [ "$COMPRESSION_LEVEL" == "semantic" ]; then
    if [ "$PAK_DEBUG" = "true" ]; then
      echo "pak4: Testing LLM connection for semantic compression..." >&2
    fi
    if ! test_llm_connection; then
      echo "pak4: Semantic compression requested but LLM unavailable. Falling back to aggressive." >&2
      COMPRESSION_LEVEL="aggressive"
    fi
  fi

  # Export semantic compressor path for pak_core.py to use
  export SEMANTIC_COMPRESSOR_PATH="$SEMANTIC_COMPRESSOR_PY"
fi

# Execute command
case "$COMMAND" in
  pack)
    if [ ${#TARGETS[@]} -eq 0 ]; then
      echo "pak4: No targets specified. Using current directory." >&2
      TARGETS=(".")
    fi

    if [ "$PAK_DEBUG" = "true" ]; then
      echo "pak4: DEBUG: Final TARGETS array for pack:" >&2; printf "pak4: DEBUG:   '%s'\n" "${TARGETS[@]}" >&2
    fi

    if [ -z "$OUTPUT_FILE" ] && [ -t 1 ]; then
      OUTPUT_FILE=$(auto_output_name)
      if ! $QUIET; then echo "pak4: Auto-generated output file: $OUTPUT_FILE" >&2; fi
    fi

    # Pack files will internally handle redirection if OUTPUT_FILE is set, or print to stdout
    pack_files
    ;;

  extract-diff)
    if [ ${#TARGETS[@]} -eq 0 ]; then
      echo "Error: No files specified for method diff extraction." >&2; usage; exit 1;
    fi
    if [ -z "$DIFF_OUTPUT_FILE" ] && [ ! -t 1 ]; then # Output to stdout if not a TTY and no -o
        echo "pak4: Diff output will be sent to stdout." >&2
    elif [ -z "$DIFF_OUTPUT_FILE" ] && [ -t 1 ]; then # Auto-name if TTY and no -o
        DIFF_OUTPUT_FILE="changes.diff"
        echo "pak4: Auto-generated diff output file: $DIFF_OUTPUT_FILE" >&2
    fi
    # extract_method_diff handles its own output redirection logic via pak_core.py's --output
    extract_method_diff
    ;;

  verify-diff)
    if [ -z "$DIFF_INPUT_FILE" ]; then
      echo "Error: No diff file specified for verification." >&2; usage; exit 1;
    fi
    verify_method_diff
    ;;

  apply-diff)
    if [ -z "$DIFF_INPUT_FILE" ]; then
      echo "Error: No diff file specified for application." >&2; usage; exit 1;
    fi
    if [ ${#TARGETS[@]} -eq 0 ]; then
        echo "Error: No target directory/file specified for applying diff." >&2; usage; exit 1;
    fi
    apply_method_diff
    ;;

  list)
    if [ -z "$ARCHIVE_FILE" ]; then echo "Error: No archive file specified for listing." >&2; usage; exit 1; fi
    call_python_core_command "list" "$ARCHIVE_FILE" "" "$EXTRACT_PATTERN"
    ;;

  list-detailed)
    if [ -z "$ARCHIVE_FILE" ]; then echo "Error: No archive file specified for detailed listing." >&2; usage; exit 1; fi
    call_python_core_command "list-detailed" "$ARCHIVE_FILE" "" "$EXTRACT_PATTERN"
    ;;

  extract)
    if [ -z "$ARCHIVE_FILE" ]; then echo "Error: No archive file specified for extraction." >&2; usage; exit 1; fi
    call_python_core_command "extract" "$ARCHIVE_FILE" "$EXTRACT_DIR" "$EXTRACT_PATTERN"
    ;;

  verify) # Archive verification
    if [ -z "$ARCHIVE_FILE" ]; then echo "Error: No archive file specified for verification." >&2; usage; exit 1; fi
    call_python_core_command "verify" "$ARCHIVE_FILE" "" ""
    ;;
  *)
    echo "Error: Unknown command '$COMMAND'" >&2
    usage
    exit 1
    ;;
esac

exit 0